import sys
import os # To use get_size() function to find out csv file size
import csv # creating the files to upload
import time # For forcing stops (time.sleep()) between API requests to avoid limit
import json # For interpreting json responses from API calls
import boto3 # To get API Keys from Secrets manager and put objects in an S3 bucket
import logging
from requests import get # For Etherscan and Moralis API calls
from requests.auth import HTTPBasicAuth # For Moralis API calls
from datetime import datetime # For putting timestamps in data

# ----------------------- Globals Creation---------------------------- #
API_KEY = ""
MAINNET_BASE_URL = "https://api.etherscan.io/api"
ETHER_VALUE = 10 ** 18

TOP_TEN_NFT_COLLECTIONS = {
    'bored ape yacht club': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d', 
    'mutant ape yacht club': '0x60e4d786628fea6478f785a6d7e704777c86a7c6',
    'otherdeed for otherside': '0x34d85c9CDeB23FA97cb08333b511ac86E1C4E258',
    'art blocks curated': '0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270',
    'azuki': '0xed5af388653567af2f388e6224dc7c4b3241c544',
    'decentraland': '0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d',
    'clone x x-takashi murakami': '0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b',
    'The Sandbox': '0x5cc5b05a8a13e3fbdb0bb9fccd98d38e50f90c38',
    'moonbirds': '0x23581767a106ae21c074b2276d25e5c3e136a68b',
    'cryptopunks': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'
}
# ---------------- Secrets Manager Code ---------------------- #
def get_etherscan_api_key():
    secrets_manager_client = boto3.client(
        'secretsmanager'
    )
    response = secrets_manager_client.get_secret_value(
        SecretId='BlockchainProjectSecrets'
    )
    secret_string = response["SecretString"]
    secret_dict = json.loads(secret_string)
    return secret_dict['EtherscanAPIKey']
# ----------- Etherscan API Calls ------------------------- #
def mainnet_make_api_url(module, action, mainnet_address, **kwargs):
    API_KEY = get_etherscan_api_key()
    print("See if API_KEY has a value in mainnet_make_api_url:", API_KEY)
    url = MAINNET_BASE_URL + f"?module={module}&action={action}&address={mainnet_address}&apikey={API_KEY}"
    for key, value in kwargs.items():
        url += f"&{key}={value}"
    return url

def mainnet_make_api_url_no_address(module, action, **kwargs):
    print("See if API_KEY has a value in mainnet_make_api_url:", API_KEY)
    url = MAINNET_BASE_URL + f"?module={module}&action={action}&apikey={API_KEY}"
    
    for key, value in kwargs.items():
        url += f"&{key}={value}"
    return url

def mainnet_get_account_balance(mainnet_address):
    balance_url = mainnet_make_api_url("account", "balance", mainnet_address, tag="latest")
    response = get(balance_url)
    data = response.json()
    value = int(data["result"]) / ETHER_VALUE
    return value
    
def mainnet_get_transactions(mainnet_address):
	transactions_url = mainnet_make_api_url("account", "txlist", mainnet_address, startblock=0, page=1, offset=10000, sort="asc")
	response = get(transactions_url)
	data = response.json()["result"]

	internal_tx_url = mainnet_make_api_url("account", "txlistinternal", mainnet_address, startblock=0, page=1, offset=10000, sort="asc")
	response2 = get(internal_tx_url)
	data2 = response2.json()["result"]

	data.extend(data2)
	data.sort(key=lambda x: int(x['timeStamp']))

	current_balance = 0
	balances = []
	times = []
	
	for tx in data:
		to = tx["to"]
		from_addr = tx["from"]
		value = int(tx["value"]) / ETHER_VALUE

		if "gasPrice" in tx:
			gas = int(tx["gasUsed"]) * int(tx["gasPrice"]) / ETHER_VALUE
		else:
			gas = int(tx["gasUsed"]) / ETHER_VALUE

		time = datetime.fromtimestamp(int(tx['timeStamp']))
		money_in = to.lower() == mainnet_address.lower()

		if money_in:
			current_balance += value
		else:
			current_balance -= value + gas

		balances.append(current_balance)
		times.append(time)

	list_to_return = [times,balances]
	return list_to_return
	
def make_wallet_balance_over_time_csv(wallet_address, times_balances_data_list):
    file_path = wallet_address + "_wallet_balance_over_time.csv"
    file_to_upload = open(file_path, 'w')
    
    times = times_balances_data_list[0]
    balances = times_balances_data_list[1]
    
    # Prepare csv and csv header
    writer = csv.writer(file_to_upload)
    header = ['wallet_address', 'balance', 'timestamp']
    writer.writerow(header)
    
    for i in range(0, len(times)):
        row = [wallet_address, balances[i], times[i]]
        writer.writerow(row)
    
    file_to_upload.close()
    
    return file_to_upload
    

# -------------------------- Moralis API Calls -------------------------------#
def moralis_get_nft_owners(contract_address, **kwargs):
    url = 'https://deep-index.moralis.io/api/v2/nft/' + contract_address + '/owners?chain=eth&format=decimal'
    headers = {'Accept': 'application/json', 'x-api-key': 'RA5E6jx6IdGbOfCLccijReUXvNNywzSTjuMMCqTRtgkDS9zr0gg00Nna9NyS9ymt'}
    auth = HTTPBasicAuth('x-api-key', 'RA5E6jx6IdGbOfCLccijReUXvNNywzSTjuMMCqTRtgkDS9zr0gg00Nna9NyS9ymt')

    req = get(url, headers=headers, auth=auth)
    req = req.json()

    cursor = req['cursor']
    results = req['result']

    while( (req['page'] * req['page_size']) < 1000): # limit to 1,000 records for now
        url = 'https://deep-index.moralis.io/api/v2/nft/' + contract_address + '/owners?chain=eth&format=decimal&cursor=' + cursor
        headers = {'Accept': 'application/json', 'x-api-key': 'RA5E6jx6IdGbOfCLccijReUXvNNywzSTjuMMCqTRtgkDS9zr0gg00Nna9NyS9ymt'}
        auth = HTTPBasicAuth('x-api-key', 'RA5E6jx6IdGbOfCLccijReUXvNNywzSTjuMMCqTRtgkDS9zr0gg00Nna9NyS9ymt')
        time.sleep(1.1) # needed to not hit request rate limit
        req = get(url, headers=headers, auth=auth)
        req = req.json()
        print('page:', req['page'])
        print('page size:', req['page_size'])
        print((req['page'] * req['page_size']), "/", req['total'], "seen")
        results += req['result']
        cursor = req['cursor']
    
    return results
    
    
def make_csv_of_NFT_tokens(collection_slug, response):
    # Create file name and path
    string_list = collection_slug.split(" ")
    file_path = ""
    for i in string_list:
        file_path = file_path + i + "_"
    file_path = file_path + "tokens.csv"
    file_to_upload = open(file_path, 'w')
    
    # Prepare csv and csv header
    writer = csv.writer(file_to_upload)
    header = ['token_address', 'token_id', 'amount', 'owner_of', 'token_hash', 'block_number_minted', 'block_number', 'updated_at', 'contract_type', 'name', 'symbol', 'token_uri']
    writer.writerow(header)
    
    # write response data to csv
    for i in range (0, len(response)):
        row = [response[i]['token_address'],
        response[i]['token_id'], 
        response[i]['amount'],
        response[i]['owner_of'],
        response[i]['token_hash'],
        response[i]['block_number_minted'],
        response[i]['block_number'],
        response[i]['updated_at'],
        response[i]['contract_type'],
        response[i]['name'],
        response[i]['symbol'],
        response[i]['token_uri']]
        writer.writerow(row)

    file_size = os.path.getsize(file_path)
    print(file_path, "is :", file_size, "bytes")

    file_to_upload.close()
    
    return file_to_upload
    
    
def make_csv_of_NFT_wallets_balance_general(collection_slug, wallets_list):
    # Create file name and path
    string_list = collection_slug.split(" ")
    file_path = ""
    for i in string_list:
        file_path = file_path + i + "_"
    file_path = file_path + "wallet_balance_general.csv"
    file_to_upload = open(file_path, 'w')
    
    # Prepare csv and csv header
    writer = csv.writer(file_to_upload)
    header = ['wallet_address', 'total_wallet_balance']
    writer.writerow(header)
    
    # write response data to csv
    for i in wallets_list:
        row = []
        row.append(i[0]) # wallet address
        row.append(mainnet_get_account_balance(i[0]))
        print(row)
        writer.writerow(row)
        time.sleep(0.1)
        
    file_size = os.path.getsize(file_path)
    print(file_path, "is :", file_size, "bytes")

    file_to_upload.close()
    
    return file_to_upload


def get_distribution_of_owners(response):
    """ A little bit of a helper method for make_csv_of_NFT_wallets_balance. """
    newlist = sorted(response, key=lambda d: d['owner_of']) # Might make things faster?
    # Get distribution of owners (how many tokens of that collection does each wallet have?)
    owners_num_of_tokens = {}
    for i in newlist:
        if (i['owner_of'] in owners_num_of_tokens):
            owners_num_of_tokens[i['owner_of']] += 1
        else:
            owners_num_of_tokens[i['owner_of']] = 1
    
    return owners_num_of_tokens
    
# ----------------------- General Methods -------------------------------- #
def upload_file(file_name, bucket, object_name=None):
    """Upload a file to an S3 bucket

    :param file_name: File to upload
    :param bucket: Bucket to upload to
    :param object_name: S3 object name. If not specified then file_name is used
    :return: True if file was uploaded, else False
    """

    # If S3 object_name was not specified, use file_name
    if object_name is None:
        object_name = os.path.basename(file_name)

    # Upload the file
    s3_client = boto3.client('s3')
    response = s3_client.upload_file(file_name, bucket, object_name)

# TODO: Make this more like a loop and parameterize it
def main():
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["bored ape yacht club"])
    file = make_csv_of_NFT_tokens("bored ape yacht club", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("bored ape yacht club", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["cryptopunks"])
    file = make_csv_of_NFT_tokens("cryptopunks", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("cryptopunks", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file =make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["mutant ape yacht club"])
    file = make_csv_of_NFT_tokens("mutant ape yacht club", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("mutant ape yacht club", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["otherdeed for otherside"])
    file = make_csv_of_NFT_tokens("otherdeed for otherside", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("otherdeed for otherside", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["art blocks curated"])
    file = make_csv_of_NFT_tokens("art blocks curated", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("art blocks curated", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["azuki"])
    file = make_csv_of_NFT_tokens("azuki", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("azuki", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["clone x x-takashi murakami"])
    file = make_csv_of_NFT_tokens("clone x x-takashi murakami", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("clone x x-takashi murakami", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["decentraland"])
    file = make_csv_of_NFT_tokens("decentraland", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("decentraland", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["The Sandbox"])
    file = make_csv_of_NFT_tokens("The Sandbox", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("The Sandbox", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)
    
    response = moralis_get_nft_owners(TOP_TEN_NFT_COLLECTIONS["moonbirds"])
    file = make_csv_of_NFT_tokens("moonbirds", response)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/tokens/'+file.name)
    owners_num_of_tokens = get_distribution_of_owners(response)
    print("Get addresses for that collection (sorting by value)")
    sorted_owners = sorted(owners_num_of_tokens.items(), key=lambda x: x[1], reverse=True)
    print(sorted_owners)
    file = make_csv_of_NFT_wallets_balance_general("moonbirds", sorted_owners)
    upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_general/'+file.name)
    for i in sorted_owners:
        print(i)
        address = i[0]
        times_balances_data_list = mainnet_get_transactions(address)
        file = make_wallet_balance_over_time_csv(address, times_balances_data_list)
        upload_file(file.name, 'blockchainproject-generaldata', 'test/wallet_balance_over_time/'+file.name)

main()
